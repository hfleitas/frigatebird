.show database cslschema script;
$command_results
| project DatabaseSchemaScript 
| where DatabaseSchemaScript has_any ('AADManagedIdentitySignInLogs','AADNonInteractiveUserSignInLogs','AADServicePrincipalSignInLogs','ADFSSignInLOgs','33rd_CoS_NiFiEventLogs')


// TESTING changes on a different cluster w/out data. 
.drop table AADManagedIdentitySignInLogs ifexists

.create table AADManagedIdentitySignInLogs (TenantId:string, SourceSystem:string, TimeGenerated:datetime, OperationName:string, OperationVersion:string, Category:string, ResultType:string, ResultSignature:string, ResultDescription:string, DurationMs:string, CorrelationId:string, ResourceGroup:string, Identity:string, Level:string, Location:string, AppId:string, AuthenticationContextClassReferences:string, AuthenticationProcessingDetails:string, ConditionalAccessPolicies:string, ConditionalAccessPoliciesV2:string, ConditionalAccessStatus:string, FederatedCredentialId:string, Id:string, IPAddress:string, LocationDetails:string, ResourceDisplayName:string, ResourceIdentity:string, ResourceServicePrincipalId:string, ServicePrincipalCredentialKeyId:string, ServicePrincipalCredentialThumbprint:string, ServicePrincipalId:string, ServicePrincipalName:string, UniqueTokenIdentifier:string, Type:string) 

AADManagedIdentitySignInLogs
| getschema 
| count


.append AADManagedIdentitySignInLogs <| datatable(TenantId:string, SourceSystem:string, TimeGenerated:datetime, OperationName:string, OperationVersion:string, Category:string, ResultType:string, ResultSignature:string, ResultDescription:string, DurationMs:string, CorrelationId:string, ResourceGroup:string, Identity:string, Level:string, Location:string, AppId:string, AuthenticationContextClassReferences:string, AuthenticationProcessingDetails:string, ConditionalAccessPolicies:string, ConditionalAccessPoliciesV2:string, ConditionalAccessStatus:string, FederatedCredentialId:string, Id:string, IPAddress:string, LocationDetails:string, ResourceDisplayName:string, ResourceIdentity:string, ResourceServicePrincipalId:string, ServicePrincipalCredentialKeyId:string, ServicePrincipalCredentialThumbprint:string, ServicePrincipalId:string, ServicePrincipalName:string, UniqueTokenIdentifier:string, Type:string) 
['helloworld','helloworld','06/20/2025 12:00:00.000', 'helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld','helloworld']  

AADManagedIdentitySignInLogs
| take 10

.create-merge table AADNonInteractiveUserSignInLogs (TenantId:string, SourceSystem:string, TimeGenerated:datetime, OperationName:string, OperationVersion:string, Category:string, ResultType:string, ResultSignature:string, ResultDescription:string, DurationMs:string, CorrelationId:string, ResourceGroup:string, Identity:string, Level:string, Location:string, AlternateSignInName:string, AppDisplayName:string, AppId:string, AppliedEventListeners:string, AuthenticationContextClassReferences:string, AuthenticationDetails:string, AuthenticationMethodsUsed:string, AuthenticationProcessingDetails:string, AuthenticationProtocol:string, AuthenticationRequirement:string, AuthenticationRequirementPolicies:string, AutonomousSystemNumber:string, ClientAppUsed:string, ConditionalAccessPolicies:string, ConditionalAccessPoliciesV2:string, ConditionalAccessStatus:string, CreatedDateTime:datetime, CrossTenantAccessType:string, DeviceDetail:string, HomeTenantId:string, Id:string, IPAddress:string, IsInteractive:string, IsRisky:string, LocationDetails:string, MfaDetail:string, NetworkLocationDetails:string, OriginalRequestId:string, ProcessingTimeInMs:string, ResourceDisplayName:string, ResourceIdentity:string, ResourceServicePrincipalId:string, ResourceTenantId:string, RiskDetail:string, RiskEventTypes:string, RiskEventTypes_V2:string, RiskLevelAggregated:string, RiskLevelDuringSignIn:string, RiskState:string, ServicePrincipalId:string, SessionLifetimePolicies:string, SignInEventTypes:string, SignInIdentifierType:string, Status:string, TokenIssuerName:string, TokenIssuerType:string, UniqueTokenIdentifier:string, UserAgent:string, UserDisplayName:string, UserId:string, UserPrincipalName:string, UserType:string, Type:string) 
.create-merge table AADServicePrincipalSignInLogs (TenantId:string, SourceSystem:string, TimeGenerated:datetime, OperationName:string, OperationVersion:string, Category:string, ResultType:string, ResultSignature:string, ResultDescription:string, DurationMs:string, CorrelationId:string, ResourceGroup:string, Identity:string, Level:string, Location:string, AppId:string, AuthenticationContextClassReferences:string, AuthenticationProcessingDetails:string, ConditionalAccessPolicies:string, ConditionalAccessPoliciesV2:string, ConditionalAccessStatus:string, FederatedCredentialId:string, Id:string, IPAddress:string, LocationDetails:string, ResourceDisplayName:string, ResourceIdentity:string, ResourceServicePrincipalId:string, ServicePrincipalCredentialKeyId:string, ServicePrincipalCredentialThumbprint:string, ServicePrincipalId:string, ServicePrincipalName:string, UniqueTokenIdentifier:string, Type:string) 
.create-merge table ADFSSignInLogs (TenantId:string, SourceSystem:string, TimeGenerated:datetime, OperationName:string, OperationVersion:string, Category:string, ResultType:string, ResultSignature:string, ResultDescription:string, DurationMs:string, CorrelationId:string, ResourceGroup:string, Identity:string, Level:string, Location:string, AlternateSignInName:string, AppDisplayName:string, AppId:string, AuthenticationDetails:string, AuthenticationProcessingDetails:string, AuthenticationRequirement:string, AuthenticationRequirementPolicies:string, ConditionalAccessPolicies:string, ConditionalAccessPoliciesV2:string, ConditionalAccessStatus:string, CreatedDateTime:datetime, DeviceDetail:string, IsInteractive:string, Id:string, IPAddress:string, NetworkLocationDetails:string, OriginalRequestId:string, ProcessingTimeInMs:string, ResourceDisplayName:string, ResourceIdentity:string, ResourceTenantId:string, Requirement:string, Status:string, TokenIssuerName:string, TokenIssuerType:string, UniqueTokenIdentifier:string, UserAgent:string, UserDisplayName:string, UserId:string, UserPrincipalName:string, Type:string) 
.create-merge table ['MyTable'] (priority:int, severity:int, facility:int, version:int, timestamp:datetime, hostname:string, body:string, _raw:string) 
.create-or-alter table ['MyTable'] ingestion csv mapping 'MyTable_csv_mapping'
```
[{"Properties":{"Ordinal":"1"},"column":"priority","datatype":"int"},{"Properties":{"Ordinal":"2"},"column":"severity","datatype":"int"},{"Properties":{"Ordinal":"3"},"column":"facility","datatype":"int"},{"Properties":{"Ordinal":"4"},"column":"version","datatype":"int"},{"Properties":{"Ordinal":"5"},"column":"timestamp","datatype":"datetime"},{"Properties":{"Ordinal":"6"},"column":"hostname","datatype":"string"},{"Properties":{"Ordinal":"7"},"column":"body","datatype":"string"},{"Properties":{"Ordinal":"8"},"column":"_raw","datatype":"string"}]
```

// .create-or-alter function with (skipvalidation = "true") AADManagedIdentitySignInLogsExpand() { AADManagedIdentitySignInLogsRaw | mv-expand events = Records | where events.Type == 'AADManagedIdentitySignInLogs' and isnotempty(events.TimeGenerated) | project TenantId = tostring(events.TenantId),SourceSystem = tostring(events.SourceSystem),TimeGenerated = todatetime(events.TimeGenerated),OperationName = tostring(events.OperationName),OperationVersion = tostring(events.OperationVersion),Category = tostring(events.Category),ResultType = tostring(events.ResultType),ResultSignature = tostring(events.ResultSignature),ResultDescription = tostring(events.ResultDescription),DurationMs = tostring(events.DurationMs),CorrelationId = tostring(events.CorrelationId),ResourceGroup = tostring(events.ResourceGroup),Identity = tostring(events.Identity),Level = tostring(events.Level),Location = tostring(events.Location),AppId = tostring(events.AppId),AuthenticationContextClassReferences = tostring(events.AuthenticationContextClassReferences),AuthenticationProcessingDetails = tostring(events.AuthenticationProcessingDetails),ConditionalAccessPolicies = tostring(events.ConditionalAccessPolicies),ConditionalAccessPoliciesV2 = tostring(events.ConditionalAccessPoliciesV2),ConditionalAccessStatus = tostring(events.ConditionalAccessStatus),FederatedCredentialId = tostring(events.FederatedCredentialId),Id = tostring(events.Id),IPAddress = tostring(events.IPAddress),LocationDetails = tostring(events.LocationDetails),ResourceDisplayName = tostring(events.ResourceDisplayName),ResourceIdentity = tostring(events.ResourceIdentity),ResourceServicePrincipalId = tostring(events.ResourceServicePrincipalId),ServicePrincipalCredentialKeyId = tostring(events.ServicePrincipalCredentialKeyId),ServicePrincipalCredentialThumbprint = tostring(events.ServicePrincipalCredentialThumbprint),ServicePrincipalId = tostring(events.ServicePrincipalId),ServicePrincipalName = tostring(events.ServicePrincipalName),UniqueTokenIdentifier = tostring(events.UniqueTokenIdentifier),Type = tostring(events.Type) }
// .create-or-alter function with (skipvalidation = "true") AADNonInteractiveUserSignInLogsExpand() { AADNonInteractiveUserSignInLogsRaw | mv-expand events = Records | where events.Type == 'AADNonInteractiveUserSignInLogs' and isnotempty(events.TimeGenerated) | project TenantId = tostring(events.TenantId),SourceSystem = tostring(events.SourceSystem),TimeGenerated = todatetime(events.TimeGenerated),OperationName = tostring(events.OperationName),OperationVersion = tostring(events.OperationVersion),Category = tostring(events.Category),ResultType = tostring(events.ResultType),ResultSignature = tostring(events.ResultSignature),ResultDescription = tostring(events.ResultDescription),DurationMs = tostring(events.DurationMs),CorrelationId = tostring(events.CorrelationId),ResourceGroup = tostring(events.ResourceGroup),Identity = tostring(events.Identity),Level = tostring(events.Level),Location = tostring(events.Location),AlternateSignInName = tostring(events.AlternateSignInName),AppDisplayName = tostring(events.AppDisplayName),AppId = tostring(events.AppId),AppliedEventListeners = tostring(events.AppliedEventListeners),AuthenticationContextClassReferences = tostring(events.AuthenticationContextClassReferences),AuthenticationDetails = tostring(events.AuthenticationDetails),AuthenticationMethodsUsed = tostring(events.AuthenticationMethodsUsed),AuthenticationProcessingDetails = tostring(events.AuthenticationProcessingDetails),AuthenticationProtocol = tostring(events.AuthenticationProtocol),AuthenticationRequirement = tostring(events.AuthenticationRequirement),AuthenticationRequirementPolicies = tostring(events.AuthenticationRequirementPolicies),AutonomousSystemNumber = tostring(events.AutonomousSystemNumber),ClientAppUsed = tostring(events.ClientAppUsed),ConditionalAccessPolicies = tostring(events.ConditionalAccessPolicies),ConditionalAccessPoliciesV2 = tostring(events.ConditionalAccessPoliciesV2),ConditionalAccessStatus = tostring(events.ConditionalAccessStatus),CreatedDateTime = todatetime(events.CreatedDateTime),CrossTenantAccessType = tostring(events.CrossTenantAccessType),DeviceDetail = tostring(events.DeviceDetail),HomeTenantId = tostring(events.HomeTenantId),Id = tostring(events.Id),IPAddress = tostring(events.IPAddress),IsInteractive = tostring(events.IsInteractive),IsRisky = tostring(events.IsRisky),LocationDetails = tostring(events.LocationDetails),MfaDetail = tostring(events.MfaDetail),NetworkLocationDetails = tostring(events.NetworkLocationDetails),OriginalRequestId = tostring(events.OriginalRequestId),ProcessingTimeInMs = tostring(events.ProcessingTimeInMs),ResourceDisplayName = tostring(events.ResourceDisplayName),ResourceIdentity = tostring(events.ResourceIdentity),ResourceServicePrincipalId = tostring(events.ResourceServicePrincipalId),ResourceTenantId = tostring(events.ResourceTenantId),RiskDetail = tostring(events.RiskDetail),RiskEventTypes = tostring(events.RiskEventTypes),RiskEventTypes_V2 = tostring(events.RiskEventTypes_V2),RiskLevelAggregated = tostring(events.RiskLevelAggregated),RiskLevelDuringSignIn = tostring(events.RiskLevelDuringSignIn),RiskState = tostring(events.RiskState),ServicePrincipalId = tostring(events.ServicePrincipalId),SessionLifetimePolicies = tostring(events.SessionLifetimePolicies),SignInEventTypes = tostring(events.SignInEventTypes),SignInIdentifierType = tostring(events.SignInIdentifierType),Status = tostring(events.Status),TokenIssuerName = tostring(events.TokenIssuerName),TokenIssuerType = tostring(events.TokenIssuerType),UniqueTokenIdentifier = tostring(events.UniqueTokenIdentifier),UserAgent = tostring(events.UserAgent),UserDisplayName = tostring(events.UserDisplayName),UserId = tostring(events.UserId),UserPrincipalName = tostring(events.UserPrincipalName),UserType = tostring(events.UserType),Type = tostring(events.Type) }
// .create-or-alter function with (skipvalidation = "true") AADServicePrincipalSignInLogsExpand() { AADServicePrincipalSignInLogsRaw | mv-expand events = Records | where events.Type == 'AADServicePrincipalSignInLogs' and isnotempty(events.TimeGenerated) | project TenantId = tostring(events.TenantId),SourceSystem = tostring(events.SourceSystem),TimeGenerated = todatetime(events.TimeGenerated),OperationName = tostring(events.OperationName),OperationVersion = tostring(events.OperationVersion),Category = tostring(events.Category),ResultType = tostring(events.ResultType),ResultSignature = tostring(events.ResultSignature),ResultDescription = tostring(events.ResultDescription),DurationMs = tostring(events.DurationMs),CorrelationId = tostring(events.CorrelationId),ResourceGroup = tostring(events.ResourceGroup),Identity = tostring(events.Identity),Level = tostring(events.Level),Location = tostring(events.Location),AppId = tostring(events.AppId),AuthenticationContextClassReferences = tostring(events.AuthenticationContextClassReferences),AuthenticationProcessingDetails = tostring(events.AuthenticationProcessingDetails),ConditionalAccessPolicies = tostring(events.ConditionalAccessPolicies),ConditionalAccessPoliciesV2 = tostring(events.ConditionalAccessPoliciesV2),ConditionalAccessStatus = tostring(events.ConditionalAccessStatus),FederatedCredentialId = tostring(events.FederatedCredentialId),Id = tostring(events.Id),IPAddress = tostring(events.IPAddress),LocationDetails = tostring(events.LocationDetails),ResourceDisplayName = tostring(events.ResourceDisplayName),ResourceIdentity = tostring(events.ResourceIdentity),ResourceServicePrincipalId = tostring(events.ResourceServicePrincipalId),ServicePrincipalCredentialKeyId = tostring(events.ServicePrincipalCredentialKeyId),ServicePrincipalCredentialThumbprint = tostring(events.ServicePrincipalCredentialThumbprint),ServicePrincipalId = tostring(events.ServicePrincipalId),ServicePrincipalName = tostring(events.ServicePrincipalName),UniqueTokenIdentifier = tostring(events.UniqueTokenIdentifier),Type = tostring(events.Type) }
// .create-or-alter function with (skipvalidation = "true") ADFSSignInLogsExpand() { ADFSSignInLogsRaw | mv-expand events = Records | where events.Type == 'ADFSSignInLogs' and isnotempty(events.TimeGenerated) | project TenantId = tostring(events.TenantId),SourceSystem = tostring(events.SourceSystem),TimeGenerated = todatetime(events.TimeGenerated),OperationName = tostring(events.OperationName),OperationVersion = tostring(events.OperationVersion),Category = tostring(events.Category),ResultType = tostring(events.ResultType),ResultSignature = tostring(events.ResultSignature),ResultDescription = tostring(events.ResultDescription),DurationMs = tostring(events.DurationMs),CorrelationId = tostring(events.CorrelationId),ResourceGroup = tostring(events.ResourceGroup),Identity = tostring(events.Identity),Level = tostring(events.Level),Location = tostring(events.Location),AlternateSignInName = tostring(events.AlternateSignInName),AppDisplayName = tostring(events.AppDisplayName),AppId = tostring(events.AppId),AuthenticationDetails = tostring(events.AuthenticationDetails),AuthenticationProcessingDetails = tostring(events.AuthenticationProcessingDetails),AuthenticationRequirement = tostring(events.AuthenticationRequirement),AuthenticationRequirementPolicies = tostring(events.AuthenticationRequirementPolicies),ConditionalAccessPolicies = tostring(events.ConditionalAccessPolicies),ConditionalAccessPoliciesV2 = tostring(events.ConditionalAccessPoliciesV2),ConditionalAccessStatus = tostring(events.ConditionalAccessStatus),CreatedDateTime = todatetime(events.CreatedDateTime),DeviceDetail = tostring(events.DeviceDetail),IsInteractive = tostring(events.IsInteractive),Id = tostring(events.Id),IPAddress = tostring(events.IPAddress),NetworkLocationDetails = tostring(events.NetworkLocationDetails),OriginalRequestId = tostring(events.OriginalRequestId),ProcessingTimeInMs = tostring(events.ProcessingTimeInMs),ResourceDisplayName = tostring(events.ResourceDisplayName),ResourceIdentity = tostring(events.ResourceIdentity),ResourceTenantId = tostring(events.ResourceTenantId),Requirement = tostring(events.Requirement),Status = tostring(events.Status),TokenIssuerName = tostring(events.TokenIssuerName),TokenIssuerType = tostring(events.TokenIssuerType),UniqueTokenIdentifier = tostring(events.UniqueTokenIdentifier),UserAgent = tostring(events.UserAgent),UserDisplayName = tostring(events.UserDisplayName),UserId = tostring(events.UserId),UserPrincipalName = tostring(events.UserPrincipalName),Type = tostring(events.Type) }



.alter table AADManagedIdentitySignInLogs policy update "[{\"IsEnabled\":true,\"Source\":\"AADManagedIdentitySignInLogsRaw\",\"Query\":\"AADManagedIdentitySignInLogsExpand()\",\"IsTransactional\":true,\"PropagateIngestionProperties\":false,\"ManagedIdentity\":null}]"
.alter table AADNonInteractiveUserSignInLogs policy update "[{\"IsEnabled\":true,\"Source\":\"AADNonInteractiveUserSignInLogsRaw\",\"Query\":\"AADNonInteractiveUserSignInLogsExpand()\",\"IsTransactional\":true,\"PropagateIngestionProperties\":false,\"ManagedIdentity\":null}]"
.alter table AADServicePrincipalSignInLogs policy update "[{\"IsEnabled\":true,\"Source\":\"AADServicePrincipalSignInLogsRaw\",\"Query\":\"AADServicePrincipalSignInLogsExpand()\",\"IsTransactional\":true,\"PropagateIngestionProperties\":false,\"ManagedIdentity\":null}]"
.alter table ADFSSignInLogs policy update "[{\"IsEnabled\":true,\"Source\":\"ADFSSignInLogsRaw\",\"Query\":\"ADFSSignInLogsExpand()\",\"IsTransactional\":true,\"PropagateIngestionProperties\":false,\"ManagedIdentity\":null}]"


// OPTION 1 : CHANGE DATA TYPE

.alter-merge table AADManagedIdentitySignInLogs ( ConditionalAccessPolicies: dynamic, LocationDetails: dynamic )


.alter-merge table MyTable schema ( severity: string, version: string )
.alter-merge table AADNonInteractiveUserSignInLogs schema ( AppliedEventListeners: dynamic, ConditionalAccessPolicies: dynamic, DeviceDetail: dynamic, IsInteractive: bool, IsRisky: bool, LocationDetails: dynamic, MfaDetail: dynamic, Status: dynamic )
.alter-merge table AADServicePrincipalSignInLogs schema ( ConditionalAccessPolicies: dynamic, LocationDetails: dynamic )
.alter-merge table ADFSSignInLogs schema ( ConditionalAccessPolicies: dynamic, DeviceDetail: dynamic, IsInteractive: bool, Status: dynamic )



.alter table MyTable (ColumnX:string, ColumnY:int) 

.append MyTable <| datatable (ColumnX:string, ColumnY:int, ColumnA:string)[
    'helloworld',1,'helloworld'
    ]

.alter table MyTable (ColumnX:string, ColumnY:int, ColumnA:string) 

.create table MyTable2 (ColumnX:string, ColumnY:int, ColumnA:dynamic) 

//automate this as single command.
.execute database script <|
//cold 
.set-or-append MyTable2 <| MyTable | project ColumnX,ColumnY,ColumnA=todynamic(ColumnA);
//hot by rename
.rename table MyTable to MyTable_deleteme;
.rename table MyTable2 to MyTable;

MyTable
| take 10


.show table MyTable extents  


// OPTION 2 - function method... Easy and Fast.

.create function MyTable () {
    table('MyTable')
    | project ColumnX=todynamic(ColumnX), ColumnY, ColumnA
}


table('MyTable')
| getschema 

MyTable
| getschema 


MyTable
